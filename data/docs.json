{
  "config": {
    "constants": [
      "string"
    ]
  },
  "docs": {
    "ModPE": {
      "namespace": true,
      "values": {
        "dumpVtable": {
          "type": "namespacemethod",
          "args": "string, int",
          "description": "Used to dump a vtable. Can be useful for addon development.",
          "example": "No information yet."
        },
        "getBytesFromTexturePack": {
          "type": "namespacemethod",
          "args": "string",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getMinecraftVersion": {
          "type": "namespacemethod",
          "args": "",
          "returns": "string",
          "description": "Returns the current MC:PE version.",
          "example": "```\nchatMessage(getMinecraftVersion());\n```\nWill post the current Minecraft version to the chat."
        },
        "langEdit": {
          "type": "namespacemethod",
          "arg_names": "key, value",
          "args": "string, string",
          "description": "Changes a key-pair value in MC:PE's internal i18n database.",
          "example": "```\nModPE.langEdit('action.interact.exit.boat', \"Disembark\");\n```\ni18n keys and default values can be found in the `/assets/loc/en_US-pocket.lang` file of the Minecraft PE APK."
        },
        "leaveGame": {
          "type": "namespacemethod",
          "args": "",
          "description": "Leaves the game.",
          "example": "No information yet."
        },
        "log": {
          "type": "namespacemethod",
          "arg_names": "message",
          "args": "string",
          "description": "Logs a message into the logcat.",
          "example": "No information yet."
        },
        "openInputStreamFromTexturePack": {
          "type": "namespacemethod",
          "args": "string",
          "arg_names": "filePath",
          "description": "Returns a Java [InputStream](https://docs.oracle.com/javase/7/docs/api/java/io/InputStream.html) of a file from a texture pack. This is quite advanced.",
          "example": "```\nvar sheet = BitmapFactory.decodeStream(ModPE.openInputStreamFromTexturePack(\"images/gui/spritesheet.png\"));\n```\nExample from [RetroPE's FontPE script](https://github.com/RetroPE/FontPE/blob/a5da4ee12b52da03944f7481d155e9ba25e7c05c/FontPE.js#L18)."
        },
        "overrideTexture": {
          "type": "namespacemethod",
          "arg_names": "texturePath, replacementPath",
          "args": "string, string",
          "description": "Overrides a default texture with the file at the supplied file path or URL.",
          "example": "```\nModPE.overrideTexture('images/items-opaque.png', 'http://example.com/items-replacement.png');\n```\nChanges the items texture file to the image at the specified URL."
        },
        "readData": {
          "type": "namespacemethod",
          "arg_names": "key",
          "args": "string",
          "returns": "string",
          "description": "Reads a value mod-specific save data by key.",
          "example": "```\nfunction newLevel() {\n    chatMessage('You still have ' + ModPE.readData('points'));\n}\n```\nReads the stored `points` value and posts it in the chat."
        },
        "removeData": {
          "type": "namespacemethod",
          "arg_names": "key",
          "args": "string",
          "description": "Removes a key-value pair from mod-specific save data.",
          "example": "```\nfunction procCmd(cmd) {\n    if (cmd.toLowerCase() == 'clearpoints') {\n        ModPE.removeData('points');\n    }\n}\n```"
        },
        "resetFov": {
          "type": "namespacemethod",
          "args": "",
          "description": "Resets FOV to default.",
          "example": "```\nfunction procCmd(cmd) {\n\tif (cmd.toLowerCase() == 'resetfov') {\n\t\tModPE.resetFov();\n\t}\n}\n```\nResets the FOV when `/resetfov` is run."
        },
        "resetImages": {
          "type": "namespacemethod",
          "args": "",
          "description": "Resets textures to their defaults.",
          "example": "No information yet."
        },
        "saveData": {
          "type": "namespacemethod",
          "arg_names": "key, value",
          "args": "string, string",
          "description": "Sets a value in mod-specific save data by key.",
          "example": "```\nfunction leaveGame() {\n    ModPE.saveData('points', 500));\n}\n```\nSets the stored `points` value to `500` when the player leaves.\nSee [ModPE.readData](#ModPE.readData)"
        },
        "selectLevel": {
          "type": "namespacemethod",
          "arg_names": "level",
          "args": "string",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setCamera": {
          "type": "namespacemethod",
          "args": "entity",
          "description": "Sets the entity the camera should target.",
          "example": "No information yet."
        },
        "setFoodItem": {
          "type": "namespacemethod",
          "arg_names": "itemId, texture, offset, halfHearts, name, stackSize",
          "args": "int, string, int, int, string, int",
          "description": "Adds a custom food item to the game.\n`halfHearts` is the total half-hearts restores when eaten.",
          "example": "```\nModPE.setFoodItem(461, \"rabbit_foot\", 0, \"2\", \"Bread Crumb\", \"32\");\n```\nCreates a new food with the [rabbit foot](http://minecraft.gamepedia.com/Rabbit's_Foot) texture called \"Bread Crumb\".\nHas a stack size of 32, and restores 1 heart, or 2 half-hearts."
        },
        "setFov": {
          "type": "namespacemethod",
          "arg_names": "amount",
          "args": "double",
          "description": "Sets the FOV for the player.",
          "example": "No information yet."
        },
        "setGameSpeed": {
          "type": "namespacemethod",
          "arg_names": "ticksPerSecond",
          "args": "double",
          "description": "Sets the amount of ticks per second. Default is `20.0`",
          "example": "No information yet."
        },
        "setGuiBlocks": {
          "type": "namespacemethod",
          "args": "string",
          "description": "Sets the textures for GUI blocks. (The first argument should be a URL.)",
          "example": "No information yet."
        },
        "setItem": {
          "type": "namespacemethod",
          "arg_names": "itemId, texture, offset, name, stackSize",
          "args": "int, string, int, string, int",
          "description": "Adds a custom item into the game.",
          "example": "```\nModPE.setItem(460, \"fireworks_charge\", 0, \"Space Rock\", \"32\");\n```\nCreates a new item with the [fireworks star](http://minecraft.gamepedia.com/Firework_Star) texture called \"Space Rock\".\nHas a stack size of 32."
        },
        "setItems": {
          "type": "namespacemethod",
          "args": "string",
          "description": "Sets the textures for items. (The first argument should be a URL.)",
          "example": "No information yet."
        },
        "setTerrain": {
          "type": "namespacemethod",
          "args": "string",
          "description": "Sets the textures for the terrain. (The first argument should be a URL.)",
          "example": "No information yet."
        },
        "showTipMessage": {
          "type": "namespacemethod",
          "arg_names": "message",
          "args": "string",
          "description": "Shows a tip message (like the message shown when you tap an item.)",
          "example": "```\nfunction useItem(x, y, z, id) {\n\tif (id == 46) { // 46 = TNT\n\t\tif (Level.getTile(x, y - 1, z) == 19) { // 19 = sponge\n\t\t\tpreventDefault();\n\t\t\tModPE.showTipMessage(\"You can't place TNT above sponge!\");\n\t\t}\n\t}\n}\n```\nThis will cancel the action and show a tip message, warning the user that they can't place TNT above a sponge block."
        },
        "takeScreenshot": {
          "type": "namespacemethod",
          "arg_names": "filename",
          "args": "string",
          "description": "Takes a screenshot and saves it with the supplied filename.",
          "example": "No information yet."
        },
        "getI18n": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "string"
        },
        "getLanguage": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setUiRenderDebug": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "par1boolean"
        },
        "getOS": {
          "type": "namespacemethod",
          "description": "Return's the client's operating system name.",
          "example": "```\nfunction newLevel() {\n    clientMessage(\"You are playing on: \" + ModPE.getOS());\n}\n```\nThis would output \"You are playing on: Android\" to the chat."
        }
      }
    },
    "Level": {
      "namespace": true,
      "values": {
        "addParticle": {
          "type": "namespacemethod",
          "arg_names": "particleType, x, y, z, velocityX, velocityY, velocityZ, size",
          "args": "int, double, double, double, double, double, double, int",
          "description": "Spawns a particle in the world.\nSee [ParticleType](#ParticleType.angryVillager) for particle types.",
          "example": "No information yet."
        },
        "biomeIdToName": {
          "type": "namespacemethod",
          "arg_names": "biomeID",
          "args": "int",
          "returns": "string",
          "description": "Converts a biome ID into its name.",
          "example": "No information yet."
        },
        "canSeeSky": {
          "type": "namespacemethod",
          "arg_names": "x, y, z",
          "args": "int, int, int",
          "returns": "bool",
          "description": "Returns whether a block is open to the sky. (No blocks above it)",
          "example": "```\nfunction destroyBlock(x, y, z, side) {\n\tif (Level.getTile(x, y, z) == 56) { // 56 = diamond ore\n\t\tif (Level.canSeeSky(x, y, z)) {\n\t\t\tif (Math.floor(Math.random() * 10 + 1) == 1) { // Get a random number between from 1 to 10\n\t\t\t\tpreventDefault();\n\t\t\t\tLevel.explode(x, y, z, 5);\n\t\t\t\tclientMessage(ChatColor.RED + \"Diamonds are sometimes quite sensitive to sunlight!\");\n\t\t\t} else {\n\t\t\t\tclientMessage(\"Ooh, lucky!\");\n\t\t\t}\n\t\t}\n\t}\n}\n```\nWhen the player destroys a block of diamond ore, if the block can see sky, there is a 1/10 chance of the block exploding."
        },
        "destroyBlock": {
          "type": "namespacemethod",
          "arg_names": "x, y, z, shouldDrop",
          "args": "int, int, int, bool",
          "description": "Destroys a block as if a player mined it.\nIf `shouldDrop` is `true`, then the block will drop any items it may drop.",
          "example": "```\nvar superBreakOn = true;\nfunction useItem(x, y, z) {\n\tif (superBreakOn && Level.getTile(x, y, z) != 0) {\n\t\tLevel.destroyBlock(x, y, z, true);\n\t}\n}\n```\nThis script let's the player break blocks just by tapping them while the boolean variable `superBreakOn` is `true`.\nThe parameter `shouldDrop` is set to `true`, so blocks will drop their drops."
        },
        "dropItem": {
          "type": "namespacemethod",
          "arg_names": "x, y, z, range, id, count, itemData",
          "args": "double, double, double, double, int, int, int",
          "returns": "entity",
          "description": "Spawns a dropped item in the world. It returns the newly created entity, which can be manipulated.\n`range` is the furthest distance it can drop from the coordinates. `0.0` is recommended.",
          "example": "```\nfunction deathHook(attacker, victim) {\n\tLevel.dropItem(Entity.getX(victim), Entity.getY(victim), Entity.getz(victim), 2.5, 38, 1, 0); // 38:0 = poppy\n}\n```\nWhen any entity dies, including the player, a red poppy is dropped at the death location."
        },
        "explode": {
          "type": "namespacemethod",
          "arg_names": "x, y, z, radius",
          "args": "double, double, double, double",
          "description": "Causes an explosion somewhere in the world.",
          "example": "```\nfunction destroyBlock(x, y, z, side) {\n\tif (Level.getTile(x, y, z) == 56) { // 56 = diamond ore\n\t\tif (Level.canSeeSky(x, y, z)) {\n\t\t\tif (Math.floor(Math.random() * 10 + 1) == 1) { // Get a random number between from 1 to 10\n\t\t\t\tpreventDefault();\n\t\t\t\tLevel.explode(x, y, z, 5);\n\t\t\t\tclientMessage(ChatColor.RED + \"Diamonds are sometimes quite sensitive to sunlight!\");\n\t\t\t} else {\n\t\t\t\tclientMessage(\"Ooh, lucky!\");\n\t\t\t}\n\t\t}\n\t}\n}\n```\nWhen the player destroys a block of diamond ore, if the block can see sky, there is a 1/10 chance of the block exploding with an explosionn radius of `5`."
        },
        "getAddress": {
          "type": "namespacemethod",
          "args": "",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getBiome": {
          "type": "namespacemethod",
          "arg_names": "x, z",
          "args": "int, int",
          "description": "Gets the ID of a biome at the specified coordinates in the world.",
          "example": "No information yet."
        },
        "getBiomeName": {
          "type": "namespacemethod",
          "arg_names": "x, z",
          "args": "int, int",
          "description": "Gets the name of a biome at the specified coordinates in the world.",
          "example": "```\nfunction procCmd(cmd) {\n\tif (cmd.toLowerCase() == 'biome') {\n\t\tvar biomeName = Level.getBiomeName(Player.getX(), Player.getY());\n\t\tclientMessage(\"The current biome is \" + biomeName);\n\t}\n}\n```"
        },
        "getBrightness": {
          "type": "namespacemethod",
          "arg_names": "x, y, z",
          "args": "int, int, int",
          "returns": "int",
          "description": "Returns the light level at a position in the world.",
          "example": "```\nfunction useItem(x, y, z, itemId, blockId) {\n\tif (itemId == 354) { // 354 = cake\n\t\tif (Level.getBrightness(x, y, z) < 8) {\n\t\t\tclientMessage(\"Are you sure you want to leave your cake in this damp darkness?\");\n\t\t\tLevel.spawnMob(x, y + 0.5, z, EntityType.SILVERFISH);\n\t\t}\n\t}\n}\n```\nThis example spawns a silverfish on cakes that have been placed in places where the light level is less than `8`, which is the light range that most hostile mobs spawn in."
        },
        "getChestSlot": {
          "type": "namespacemethod",
          "arg_names": "x, y, z, slotNumber",
          "args": "int, int, int, int",
          "description": "Returns the ID of an item in a chest, at the specified slot.",
          "example": "No information yet."
        },
        "getChestSlotCount": {
          "type": "namespacemethod",
          "arg_names": "x, y, z, slotNumber",
          "args": "int, int, int, int",
          "description": "Returns the count of an item in a chest, at the specified slot.",
          "example": "No information yet."
        },
        "getChestSlotData": {
          "type": "namespacemethod",
          "arg_names": "x, y, z, slotNumber",
          "args": "int, int, int, int",
          "description": "Returns the data of an item in a chest, at the specified slot.",
          "example": "No information yet."
        },
        "getData": {
          "type": "namespacemethod",
          "arg_names": "x, y, z",
          "args": "int, int, int",
          "description": "Returns the data of a block in the world.",
          "example": "No information yet."
        },
        "getFurnaceSlot": {
          "type": "namespacemethod",
          "arg_names": "x, y, z, slotNumber",
          "args": "int, int, int, int",
          "description": "Returns the ID of an item in a furnace, at the specified slot.",
          "example": "No information yet."
        },
        "getFurnaceSlotCount": {
          "type": "namespacemethod",
          "arg_names": "x, y, z, slotNumber",
          "args": "int, int, int, int",
          "description": "Returns the count of an item in a furnace, at the specified slot.",
          "example": "No information yet."
        },
        "getFurnaceSlotData": {
          "type": "namespacemethod",
          "arg_names": "x, y, z, slotNumber",
          "args": "int, int, int, int",
          "description": "Returns the data of an item in a furnace, at the specified slot.",
          "example": "No information yet."
        },
        "getGameMode": {
          "type": "namespacemethod",
          "args": "",
          "returns": "int",
          "description": "Returns the gamemode the player is currently in.",
          "example": "No information yet."
        },
        "getGrassColor": {
          "type": "namespacemethod",
          "arg_names": "x, z",
          "args": "int, int",
          "returns": "int",
          "description": "Returns the color of grass at the specified coordinate.",
          "example": "No information yet."
        },
        "getLightningLevel": {
          "type": "namespacemethod",
          "args": "",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getRainLevel": {
          "type": "namespacemethod",
          "args": "",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getSignText": {
          "type": "namespacemethod",
          "arg_names": "x, y, z, lineNumber",
          "args": "int, int, int, int (0-4)",
          "description": "Returns a line of text from a sign.",
          "example": "No information yet."
        },
        "getSpawnerEntityType": {
          "type": "namespacemethod",
          "arg_names": "x, y, z",
          "args": "int, int, int",
          "description": "Returns the entity ID of a spawner.",
          "example": "No information yet."
        },
        "getTile": {
          "type": "namespacemethod",
          "arg_names": "x, y, z",
          "args": "int, int, int",
          "returns": "int",
          "description": "Returns the ID of a block in the world.",
          "example": "No information yet."
        },
        "getTime": {
          "type": "namespacemethod",
          "args": "",
          "returns": "int",
          "description": "Returns the amount of ticks passed in the world.",
          "example": "No information yet."
        },
        "getWorldDir": {
          "type": "namespacemethod",
          "args": "",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getWorldName": {
          "type": "namespacemethod",
          "args": "",
          "returns": "string",
          "description": "Returns the name of the world.",
          "example": "No information yet."
        },
        "getDifficulty": {
          "type": "namespacemethod",
          "args": "",
          "returns": "int",
          "description": "Returns the difficulty level as an integer.",
          "example": "```\nfunction newLevel() {\n    if (Level.getDifficulty == 1) {\n        clientMessage(\"You are in creative mode!\");\n    }\n}\n```"
        },
        "setDifficulty": {
          "type": "namespacemethod",
          "args": "int",
          "arg_names": "difficulty",
          "description": "Changes the difficulty level.",
          "example": "```\nfunction useItem(x, y, z, itemId) {\n    if (itemId == 280 && Level.getDifficulty == 1) { //280 = stick\n    Level.setDifficulty(0);\n    clientMessage(\"You are now in survival mode!\");\n    }\n}\n```"
        },
        "playSound": {
          "type": "namespacemethod",
          "arg_names": "x, y, z, soundName, volume, pitch",
          "args": "double, double, double, string, double, double",
          "description": "Plays a sound somewhere in the world.",
          "example": "No information yet."
        },
        "playSoundEnt": {
          "type": "namespacemethod",
          "args": "Object, string, double, double",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setChestSlot": {
          "type": "namespacemethod",
          "args": "int, int, int, int, int, int, int",
          "description": "\n- `int`: X of the chest\n- `int`: Y of the chest\n- `int`: Z of the chest\n- `int`: Slot in the chest\n- `int`: ID of the new item\n- `int`: Damage (aux) of the new item\n- `int`: Count of the new item.\n\nSets what item is in a chest, at a certain slot.",
          "example": "No information yet."
        },
        "setFurnaceSlot": {
          "type": "namespacemethod",
          "args": "int, int, int, int, int, int, int",
          "description": "\n- `int`: X of the furnace\n- `int`: Y of the furnace\n- `int`: Z of the furnace\n- `int`: Slot in the furnace\n- `int`: ID of the new item\n- `int`: Damage (aux) of the new item\n- `int`: Count of the new item.\n\nSets what item is in a furnace, at a certain slot.",
          "example": "No information yet."
        },
        "setGameMode": {
          "type": "namespacemethod",
          "args": "int",
          "description": "Sets the gamemode the player is in.",
          "example": "No information yet."
        },
        "setGrassColor": {
          "type": "namespacemethod",
          "args": "int, int, int",
          "description": "\n- `int`: X\n- `int`: Y\n- `int`: Color (`0xAABBCCDD` color)\n\nSets the grass color of a column in the world.",
          "example": "No information yet."
        },
        "setLightningLevel": {
          "type": "namespacemethod",
          "args": "double",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setNightMode": {
          "type": "namespacemethod",
          "args": "",
          "description": "Unknown.",
          "example": "No information yet."
        },
        "setRainLevel": {
          "type": "namespacemethod",
          "args": "double",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setSignText": {
          "type": "namespacemethod",
          "args": "int, int, int, int, string",
          "description": "\n- `int`: X pos\n- `int`: Y pos\n- `int`: Z pos\n- `int`: Line (0, 1, 2, or 3)\n- `string`: Text\n\nSets a line of text in a sign.",
          "example": "No information yet."
        },
        "setSpawn": {
          "type": "namespacemethod",
          "args": "int, int, int",
          "description": "\n- `int`: X\n- `int`: Y\n- `int`: Z\n\nSets the spawn position of the current world.",
          "example": "No information yet."
        },
        "setSpawnerEntityType": {
          "type": "namespacemethod",
          "args": "int, int, int, int",
          "description": "\n- `int`: X\n- `int`: Y\n- `int`: Z\n- `int`: Entity type ID\n\nSets the entity ID of an entity that an entity spawner will spawn.",
          "example": "No information yet."
        },
        "setTile": {
          "type": "namespacemethod",
          "args": "int, int, int, int, int",
          "description": "\n- `int`: X\n- `int`: Y\n- `int`: Z\n- `int`: Block ID\n- `int`: Block data\n\nSets the ID and damage of a block in the world.",
          "example": "No information yet."
        },
        "setTime": {
          "type": "namespacemethod",
          "args": "int",
          "description": "Sets the amount of ticks that has passed in the world.",
          "example": "No information yet."
        },
        "spawnChicken": {
          "type": "namespacemethod",
          "args": "double, double, double, string",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "spawnCow": {
          "type": "namespacemethod",
          "args": "double, double, double, string",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "spawnMob": {
          "type": "namespacemethod",
          "args": "double, double, double, int, string",
          "description": "Creates an entity.\n- `double`: X\n- `double`: Y\n- `double`: Z\n- `int`: Entity type ID\n- `string`: Skin (PNG file)",
          "example": "No information yet."
        },
        "getChestSlotCustomName": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "int, int, int, int"
        },
        "setChestSlotCustomName": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "int, int, int, int, string"
        }
      }
    },
    "Player": {
      "namespace": true,
      "values": {
        "addExp": {
          "type": "namespacemethod",
          "args": "int",
          "description": "Adds the amount of EXP the player has.",
          "example": "No information yet."
        },
        "addItemCreativeInv": {
          "type": "namespacemethod",
          "args": "int, int, int",
          "description": "- `int`: ID\n- `int`: Count (usually 1)\n- `int`: Data (damage)\n\nAdds an item into the creative inventory. If you want to set which creative tab (category) it belongs in, use `Item.setCategory`.",
          "example": "No information yet."
        },
        "addItemInventory": {
          "type": "namespacemethod",
          "args": "int, int, int",
          "description": "Adds an item into the player's inventory. `(id, count, damage)`",
          "example": "No information yet."
        },
        "canFly": {
          "type": "namespacemethod",
          "args": "",
          "returns": "bool",
          "description": "Returns whether the player can fly.",
          "example": "No information yet."
        },
        "clearInventorySlot": {
          "type": "namespacemethod",
          "args": "int",
          "description": "\n- `int`: The slot.\n\nClears a slot in the player's inventory.",
          "example": "No information yet."
        },
        "enchant": {
          "type": "namespacemethod",
          "args": "int, int, int",
          "description": "\n- `int`: The slot ID of the item in the player's inventory.\n- `int`: The enchantment.\n- `int`: The level of the enchantment\n\nEnchants an item in the player's inventory.",
          "example": "No information yet."
        },
        "getEnchantments": {
          "type": "namespacemethod",
          "args": "int",
          "returns": "Object[]",
          "description": "\n- `int`: The slot ID of the item.\n\nReturns the enchantments. It is an array that has the following structure-\n```\nvar x = Player.getEnchantments(...);\nx.type // id of the enchant\nx.level // level of the enchant\n```",
          "example": "No information yet."
        },
        "getArmorSlot": {
          "type": "namespacemethod",
          "args": "int",
          "description": "\n- `int`: The slot\n\nReturns the ID of an armor item.",
          "example": "No information yet."
        },
        "getArmorSlotDamage": {
          "type": "namespacemethod",
          "args": "int",
          "description": "\n- `int`: The slot\n\nReturns the damage of an armor item.",
          "example": "No information yet."
        },
        "getCarriedItem": {
          "type": "namespacemethod",
          "args": "",
          "returns": "int",
          "description": "Returns the ID of the item the player is carrying.",
          "example": "No information yet."
        },
        "getCarriedItemCount": {
          "type": "namespacemethod",
          "args": "",
          "description": "Returns the count of the item the player is carrying.",
          "example": "No information yet."
        },
        "getCarriedItemData": {
          "type": "namespacemethod",
          "args": "",
          "description": "Returns the damage of the item the player is carrying.",
          "example": "No information yet."
        },
        "getDimension": {
          "type": "namespacemethod",
          "args": "",
          "returns": "int",
          "description": "Returns the dimension ID the player is in.",
          "example": "No information yet."
        },
        "getEntity": {
          "type": "namespacemethod",
          "args": "",
          "returns": "entity",
          "description": "Returns the player as an entity.",
          "example": "No information yet."
        },
        "getExhaustion": {
          "type": "namespacemethod",
          "args": "",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getExp": {
          "type": "namespacemethod",
          "args": "",
          "returns": "double",
          "description": "Returns the amount of EXP the player has.",
          "example": "No information yet."
        },
        "getHunger": {
          "type": "namespacemethod",
          "args": "",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getInventorySlot": {
          "type": "namespacemethod",
          "args": "int",
          "returns": "int",
          "description": "\n- `int`: The slot.\n\nReturns the ID of the item in the inventory slot.",
          "example": "No information yet."
        },
        "getInventorySlotCount": {
          "type": "namespacemethod",
          "args": "int",
          "returns": "int",
          "description": "\n- `int`: The slot.\n\nReturns the count of the item in the inventory slot.",
          "example": "No information yet."
        },
        "getInventorySlotData": {
          "type": "namespacemethod",
          "args": "int",
          "returns": "int",
          "description": "\n- `int`: The slot.\n\nReturns the damage (aux) of the item in the inventory slot.",
          "example": "No information yet."
        },
        "getLevel": {
          "type": "namespacemethod",
          "args": "",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getName": {
          "type": "namespacemethod",
          "args": "Object",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getPointedBlockData": {
          "type": "namespacemethod",
          "args": "",
          "returns": "int",
          "description": "Returns the data (damage) of the block you are pointing at.",
          "example": "No information yet."
        },
        "getPointedBlockId": {
          "type": "namespacemethod",
          "args": "",
          "returns": "int",
          "description": "Returns the ID of the block you are pointing at.",
          "example": "No information yet."
        },
        "getPointedBlockSide": {
          "type": "namespacemethod",
          "args": "",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getPointedBlockX": {
          "type": "namespacemethod",
          "args": "",
          "returns": "int",
          "description": "Returns the pointed block's X position.",
          "example": "No information yet."
        },
        "getPointedBlockY": {
          "type": "namespacemethod",
          "args": "",
          "returns": "int",
          "description": "Returns the pointed block's Y position.",
          "example": "No information yet."
        },
        "getPointedBlockZ": {
          "type": "namespacemethod",
          "args": "",
          "retunrs": "int",
          "description": "Returns the pointed block's Z position.",
          "example": "No information yet."
        },
        "getPointedEntity": {
          "type": "namespacemethod",
          "args": "",
          "returns": "entity",
          "description": "Returns the entity that is under the cursor.\nMight only work in split touch mode.",
          "example": "No information yet."
        },
        "getPointedVecX": {
          "type": "namespacemethod",
          "args": "",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getPointedVecY": {
          "type": "namespacemethod",
          "args": "",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getPointedVecZ": {
          "type": "namespacemethod",
          "args": "",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getSaturation": {
          "type": "namespacemethod",
          "args": "",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getSelectedSlotId": {
          "type": "namespacemethod",
          "args": "",
          "returns": "int",
          "description": "Returns the slot ID the player currently has selected.",
          "example": "No information yet."
        },
        "getX": {
          "type": "namespacemethod",
          "args": "",
          "returns": "double",
          "description": "Returns the X coordinate of the player.",
          "example": "No information yet."
        },
        "getY": {
          "type": "namespacemethod",
          "args": "",
          "returns": "double",
          "description": "Returns the Y coordinate of the player.",
          "example": "No information yet."
        },
        "getZ": {
          "type": "namespacemethod",
          "args": "",
          "returns": "double",
          "description": "Returns the Z coordinate of the player.",
          "example": "No information yet."
        },
        "isFlying": {
          "type": "namespacemethod",
          "args": "",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "isPlayer": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "bool",
          "description": "Returns whether an entity is a player.",
          "example": "No information yet."
        },
        "setItemCustomName": {
          "type": "namespacemethod",
          "args": "int, string",
          "description": "\n- `int`: The slot id of the target item.\n- `string`: The new name.\n\nSets the custom name of an item.",
          "example": "No information yet."
        },
        "getItemCustomName": {
          "type": "namespacemethod",
          "args": "int",
          "returns": "string",
          "description": "\n- `int`: The slot id of the item.\n\nReturns the custom name of an item.",
          "example": "No information yet."
        },
        "setArmorSlot": {
          "type": "namespacemethod",
          "args": "int, int, int",
          "description": "\n- `int`: Slot number\n- `int`: ID of the piece\n- `int`: Damage (data) of the piece.\n\nSets the player's armor slot.",
          "example": "No information yet."
        },
        "setCanFly": {
          "type": "namespacemethod",
          "args": "boolean",
          "description": "Sets whether the player can fly.",
          "example": "No information yet."
        },
        "setExhaustion": {
          "type": "namespacemethod",
          "args": "double",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setExp": {
          "type": "namespacemethod",
          "args": "double",
          "description": "Sets the player's EXP.",
          "example": "No information yet."
        },
        "setFlying": {
          "type": "namespacemethod",
          "args": "",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setHealth": {
          "type": "namespacemethod",
          "args": "int",
          "description": "Sets the player's health, in half-hearts. (1 heart = 2)",
          "example": "No information yet."
        },
        "setHunger": {
          "type": "namespacemethod",
          "args": "double",
          "description": "Sets the player's hunger ",
          "example": "No information yet."
        },
        "setLevel": {
          "type": "namespacemethod",
          "args": "int",
          "description": "Sets the player's XP ",
          "example": "No information yet."
        },
        "setSaturation": {
          "type": "namespacemethod",
          "args": "double",
          "description": "Sets the player's saturation  The player's hunger will not decrease unless their saturation level is zero.",
          "example": "No information yet."
        },
        "setSelectedSlotId": {
          "type": "namespacemethod",
          "args": "int",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setInventorySlot": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "int, int, int, int"
        },
        "getScore": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet."
        }
      }
    },
    "Entity": {
      "namespace": true,
      "values": {
        "addEffect": {
          "type": "namespacemethod",
          "args": "entity, int, int, int, bool, bool",
          "arg_names": "target, effect, duration, amplifier, ambient, showParticles",
          "description": "Gives an entity a potion effect.\n- `effect`: use [MobEffect](#MobEffect).\n- `duration`: is in ticks\n- `amplifier`: specifies the number of additional levels to add to the effect\n- `ambient`: Makes potion effect produce more, translucent, particles.",
          "example": "```\nEntity.addEffect(Player.getEntity(), MobEffect.fireResistance, 1, 40, true, true);\n```"
        },
        "getAll": {
          "type": "namespacemethod",
          "args": "",
          "returns": "entity[]",
          "description": "Returns all of the entities in an array.",
          "example": "No information yet."
        },
        "getAnimalAge": {
          "type": "namespacemethod",
          "args": "entity",
          "description": "Returns the age of an animal.",
          "example": "No information yet."
        },
        "getArmor": {
          "type": "namespacemethod",
          "args": "entity?, int",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getArmorDamage": {
          "type": "namespacemethod",
          "args": "entity?, int",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getEntityTypeId": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "int",
          "description": "Returns the entity ID of an entity.",
          "example": "No information yet."
        },
        "getHealth": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "int",
          "description": "Returns the health of an entity.",
          "example": "No information yet."
        },
        "getItemEntityCount": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "int",
          "description": "Returns the count of the item in an item entity.",
          "example": "No information yet."
        },
        "getItemEntityData": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "int",
          "description": "Returns the data (damage) of the item in an item entity.",
          "example": "No information yet."
        },
        "getItemEntityId": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "int",
          "description": "Returns the ID of the item in an item entity.",
          "example": "```\nclientMessage(Entity.getItemEntityId(my_item_entity));\n```"
        },
        "getMaxHealth": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "int",
          "description": "Returns the maximum health for an entity.",
          "example": "No information yet."
        },
        "getMobSkin": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "string",
          "description": "Returns the skin file of an entity.",
          "example": "No information yet."
        },
        "getNameTag": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "string",
          "description": "Returns the name tag of an entity.",
          "example": "No information yet."
        },
        "getPitch": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "double",
          "description": "Returns the pitch (rotation-wise) of this entity.",
          "example": "This example prints the player's yaw when they tap a block.\n```\nfunction useItem() {\n  clientMessage(Entity.getPitch(Player.getEntity()));\n}\n```"
        },
        "getRenderType": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "int",
          "description": "Returns the render type this entity has.",
          "example": "No information yet."
        },
        "getRider": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "entity",
          "description": "Gets the entity that is riding this one.",
          "example": "No information yet."
        },
        "getRiding": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "entity",
          "description": "Gets the entity that is being ridden by this one.",
          "example": "No information yet."
        },
        "getUniqueId": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "string",
          "description": "Returns the UUID of this entity.",
          "example": "No information yet."
        },
        "getVelX": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "double",
          "description": "Returns the velocity of this entity in the X coordinate.",
          "example": "No information yet."
        },
        "getVelY": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "double",
          "description": "Returns the velocity of this entity in the Y coordinate.",
          "example": "No information yet."
        },
        "getVelZ": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "double",
          "description": "Returns the velocity of this entity in the Z coordinate.",
          "example": "No information yet."
        },
        "getX": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "double",
          "description": "Returns the X coordinate of this entity.",
          "example": "No information yet."
        },
        "getY": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "double",
          "description": "Returns the Y coordinate of this entity.",
          "example": "No information yet."
        },
        "getYaw": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "double",
          "description": "Returns the yaw (rotation-wise) of this entity.",
          "example": "\nThis example prints the player's yaw when they tap a block.\n```\nfunction useItem() {\n  clientMessage(Entity.getYaw(Player.getEntity()));\n}\n```"
        },
        "getZ": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "double",
          "description": "Returns the Z coordinate of this entity.",
          "example": "No information yet."
        },
        "isSneaking": {
          "type": "namespacemethod",
          "args": "entity",
          "returns": "bool",
          "description": "Returns whether this entity is sneaking.",
          "example": "No information yet."
        },
        "remove": {
          "type": "namespacemethod",
          "args": "entity",
          "description": "Instantly removes this entity from the world.",
          "example": "No information yet."
        },
        "removeAllEffects": {
          "type": "namespacemethod",
          "args": "entity",
          "description": "Removes all effects from an entity.",
          "example": "```\nEntity.removeAllEffects(Player.getEntity());\n```"
        },
        "removeEffect": {
          "type": "namespacemethod",
          "args": "entity, int",
          "description": "\n- `entity`: Target\n- `int`: ID of the effect. Use `MobEffect`.\n\nRemoves a specific potion effect from an entity.",
          "example": "```\nEntity.removeEffect(Player.getEntity(), MobEffect.nightVision);\n```"
        },
        "setExtraData": {
          "type": "namespacemethod",
          "args": "entity, key, value",
          "description": "\n- `entity`: Target\n- `key`: The key. Must be in the form of `something.something.something` - `value`: A string.\n\nStores extra data for this entity."
        },
        "getExtraData": {
          "type": "namespacemethod",
          "args": "entity, key",
          "description": "\n- `entity`: Target\n- `key`: The key to get the value from.\n\nReturns the data stored at this entity's key."
        },
        "rideAnimal": {
          "type": "namespacemethod",
          "args": "entity, entity",
          "description": "Makes an entity ride another.",
          "example": "No information yet."
        },
        "setAnimalAge": {
          "type": "namespacemethod",
          "args": "entity?, int",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setArmor": {
          "type": "namespacemethod",
          "args": "entity?, int, int, int",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setCape": {
          "type": "namespacemethod",
          "args": "entity?, string",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setCarriedItem": {
          "type": "namespacemethod",
          "args": "entity?, int, int, int",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setCollisionSize": {
          "type": "namespacemethod",
          "args": "entity?, double, double",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setFireTicks": {
          "type": "namespacemethod",
          "args": "entity, int",
          "description": "Sets how long an entity is on fire, using ticks. (20 = 1 second)",
          "example": "No information yet."
        },
        "setHealth": {
          "type": "namespacemethod",
          "args": "entity, int",
          "description": "Sets the health of an entity.",
          "example": "No information yet."
        },
        "setMaxHealth": {
          "type": "namespacemethod",
          "args": "entity, int",
          "description": "Sets the maximum health of an entity.",
          "example": "No information yet."
        },
        "setMobSkin": {
          "type": "namespacemethod",
          "args": "entity?, string",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setNameTag": {
          "type": "namespacemethod",
          "args": "entity, string",
          "description": "Sets the name tag of an entity.",
          "example": "No information yet."
        },
        "setPosition": {
          "type": "namespacemethod",
          "args": "entity, double, double, double",
          "description": "\n- `entity`: Target\n- `double`: X\n- `double`: Y\n- `double`: Z\n\nSets the position of an entity.",
          "example": "No information yet."
        },
        "setPositionRelative": {
          "type": "namespacemethod",
          "args": "entity?, double, double, double",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setRenderType": {
          "type": "namespacemethod",
          "args": "entity, int",
          "description": "Sets the render type ID of an entity.",
          "example": "No information yet."
        },
        "setRot": {
          "type": "namespacemethod",
          "args": "entity?, double, double",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setSneaking": {
          "type": "namespacemethod",
          "args": "entity, boolean",
          "description": "Sets whether an entity is sneaking (crouching).",
          "example": "No information yet."
        },
        "setVelX": {
          "type": "namespacemethod",
          "args": "entity, double",
          "description": "Sets an entity's velocity in the X axis.",
          "example": "No information yet."
        },
        "setVelY": {
          "type": "namespacemethod",
          "args": "entity, double",
          "description": "Sets an entity's velocity in the Y axis.",
          "example": "No information yet."
        },
        "setVelZ": {
          "type": "namespacemethod",
          "args": "entity, double",
          "description": "Sets an entity's velocity in the Z axis.",
          "example": "No information yet."
        },
        "spawnMob": {
          "type": "namespacemethod",
          "args": "double, double, double, int, string",
          "description": "\n- `double`: X\n- `double`: Y\n- `double`: Z\n- `int`: Entity type ID\n- `string`: Skin PNG\n\nSpawns an entity.",
          "example": "No information yet."
        },
        "getTarget": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "Object"
        },
        "setImmobile": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "Object, par2boolean"
        },
        "setTarget": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "Object, Object"
        },
        "getArmorCustomName": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "Object, int"
        },
        "setArmorCustomName": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "Object, int, String"
        }
      }
    },
    "Item": {
      "namespace": true,
      "values": {
        "addCraftRecipe": {
          "type": "namespacemethod",
          "arg_names": "id, count, data, ingredients",
          "args": "int, int, int, array",
          "description": "Creates an unshaped crafting recipe.\n\nIngredients should have a continuous 1D array like this:\n```\n[id, count, damage, id, count, damage, id, count, damage, ...]\n```",
          "example": "```\nItem.addCraftRecipe(256, 1, 0, [1, 1, 0, 2, 1, 0]);\n```\nThis creates a shovel from 1 stone block & 1 grass block."
        },
        "addFurnaceRecipe": {
          "type": "namespacemethod",
          "args": "int, int, int",
          "arg_names": "inputId, outputId, outptDamage",
          "description": "Creates a simple furnace recipe.",
          "example": "```\nItem.addFurnaceRecipe(1, 4, 0);\n```\nCreates a furnace recipe to make cobblestone from stone."
        },
        "addShapedRecipe": {
          "type": "namespacemethod",
          "args": "int, int, int, arry, array",
          "arg_names": "id, count, damage, shape, letters",
          "description": "Adds a shaped crafting recipe. Use this function if you want your recipe to be in a specific shape.",
          "example": "This makes you receive 64 stone from a crafting recipe of grass blocks shaped in a diamond.\n```\nItem.addShapedRecipe(1, 64, 0, [\n  \" x \", // Top row.\n  \"x x\", // Middle row.\n  \" x \" // Bottom row.\n], [\"x\", 2, 0]); // This makes \"x\" mean grass (2) with damage of (0).\n```\nHere is an example of what it looks like in game:\n\n![picture of crafting recipe](images/shapedrecipe1.png)\n\n\nThis makes you receive 64 stone from a crafting recipe of grass blocks shaped in a diamond, with a bedrock block in the center.\n```\nItem.addShapedRecipe(1, 64, 0, [\n  \" x \", // Top row.\n  \"xbx\", // Middle row.\n  \" x \" // Bottom row.\n], [\"x\", 2, 0, \"b\", 7, 0]); // This makes \"x\" mean grass (2) with damage of (0).\n// Also makes \"b\" mean bedrock (7) with damage of (0).\n```\nHere is an example of what it looks like in game:\n\n![picture of crafting recipe](images/shapedrecipe2.png)"
        },
        "defineArmor": {
          "type": "namespacemethod",
          "args": "int, string, int, string, string, int, int, int",
          "arg_names": "id, iconName, iconIndex, name, texture, damageReduceAmount, maxDamage, armorType",
          "description": "Defines a new piece of armor.",
          "example": "```\nItem.defineArmor(411, \"empty_armor_slot_boots\", 0, \"Zombie mask\", \"mob/zombie.png\", 1, 10, ArmorType.helmet);\nItem.defineArmor(412, \"empty_armor_slot_chestplate\", 0, \"Zombie shirt\", \"mob/zombie.png\", 1, 10, ArmorType.chestplate);\nItem.defineArmor(413, \"empty_armor_slot_leggings\", 0, \"Zombie pants\", \"mob/zombie.png\", 1, 10, ArmorType.leggings);\nItem.defineArmor(414, \"empty_armor_slot_boots\", 0, \"Zombie shoes\", \"mob/zombie.png\", 1, 10, ArmorType.boots);\n```\nExample by [Zhuowei](https://github.com/zhuowei/ModPEScripts/blob/f8a6092f5e10a8b9829551b10c4350b6f928486c/armortest.js)"
        },
        "getName": {
          "type": "namespacemethod",
          "args": "int, int, boolean",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "isValidItem": {
          "type": "namespacemethod",
          "args": "int",
          "arg_names": "id",
          "description": "Returns whether this item is valid.",
          "example": "No information yet."
        },
        "setCategory": {
          "type": "namespacemethod",
          "args": "int, int",
          "arg_names": "id, itemCategory",
          "description": "Sets the creative tab this item should belong in.\nNote that it doesn't show unless you use `Player.addItemCreativeInv`.\n\nSee [ItemCategory](#ItemCategory) for ItemCategory constants.",
          "example": "```\nModpe.setItem(440, 'camera', 0, \"Coin\", 32);\nItem.setCategory(440, ItemCategory.TOOL);\nPlayer.addItemCreativeInv(440, 1, 0);\n```"
        },
        "setHandEquipped": {
          "type": "namespacemethod",
          "args": "int",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "setMaxDamage": {
          "type": "namespacemethod",
          "args": "int, int",
          "arg_names": "id, maxDamage",
          "description": "Sets the maximum amount of damage this item has?",
          "example": "No information yet."
        },
        "setProperties": {
          "type": "namespacemethod",
          "args": "int, Object",
          "arg_names": "id, properties",
          "description": "Sets an item's properties, like in `items.json`.",
          "example": "This makes an item edible.\n```\n// Let's create a new item called 'Toast'\nModpe.setItem(440, 'bread', 0, \"Toast\", 32);\nItem.setProperties(440, {\n    use_animation: \"eat\", // Use the eating animation\n    use_duration: 32,\n    food: {\n      nutrition: 4, // Give it 4 1/2 hearts of nutrition\n      saturation_modifier: \"low\",\n      is_meat: false\n    }\n});\n```\nThis example can be replicated *much* easier with [ModPE.setFoodItem](#ModPE.setFoodItem)."
        },
        "getUseAnimation": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "int"
        },
        "setStackedByData": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "int, par2boolean"
        },
        "setUseAnimation": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "int, int"
        },
        "setEnchantType": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "int, int, int"
        },
        "getMaxDamage": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "int"
        },
        "getTextureCoords": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "int, int"
        },
        "internalNameToId": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "String"
        },
        "translatedNameToId": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "String"
        },
        "getMaxStackSize": {
          "type": "namespacemethod",
          "description": "Returns the maximum stack size of an item.",
          "example": "```\nclientMessage(Item.getMaxStackSize(332)); // 332 = snowball\n```\nThe above prints `16` to the chat.",
          "args": "int",
          "arg_names": "id"
        },
        "defineThrowable": {
          "type": "namespacemethod",
          "description": "Allows an item to be a throwable projectile, like a snowball.",
          "example": "```\nItem.defineThrowable(4015, \"apple\", 0, \"Throwable Thing\", 64);\n```",
          "args": "int, String, int, String, int",
          "arg_names": "id, texture, offset, name, stackLimit"
        },
        "getCustomThrowableRenderType": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "int",
          "arg_names": "id"
        }
      }
    },
    "Block": {
      "namespace": true,
      "values": {
        "defineLiquidBlock": {
          "type": "namespacemethod",
          "args": "int, string, array OR string, int",
          "arg_names": "id, name, textures, material",
          "returns": "int",
          "description": "Defines a new liquid block.\n\n`id + 1` will be used as the stationary version's ID.\n\nReturns `id + 1`",
          "example": "```\nvar liquidId = 191; // 192 will be used for still version\nBlock.defineLiquidBlock(liquidId, \"Mudslide\", [[\"stone\", 0], [\"sand\", 0]], 10); // 10 = lava\n```"
        },
        "defineBlock": {
          "type": "namespacemethod",
          "args": "int, string, array OR string, int, bool, int",
          "arg_names": "id, name, textures, material, opaque, renderType",
          "description": "Defines a new block These are the parameters in order:\n- `id`: The block ID.\n- `name`: The name of the block.\n- `textures`: The name of a texture, or a texture matrix.\n\n**Note**: You can find texture names [here, on zhuowei's site.](http://zhuoweizhang.net/mcpetexturenames/)\nExample of a texture matrix:\n```\n[[\"bottom texture\", subID], [\"top texture\", subID], [\"south texture\", subID], [\"north texture\", subID], [\"west texture\", subID], [\"east texture name\", subID]]\n```\n- `material`: Use a block's material for this one.\n- `opaque`: ???\n- `renderType`: Sets the render type this block will use.",
          "example": "```\nBlock.defineBlock(242, \"Strange Green Block\", ['melon', 0], 1, true, 0);\nBlock.defineBlock(241, \"Crate\", 'piston_top_normal', 54, true, 0);\nBlock.defineBlock(240, \"Weird Block\", [\n\t['soul_sand', 0], \t\t// bottom\n\t['pumpkin', 3], \t\t// top\n\t['piston_side', 0], \t// south\n\t['mycelium', 1], \t\t// north\n\t['jukebox_side', 0], \t// west\n\t['crafting_table', 1]\t// east\n\t], 20, true, 0);\n```"
        },
        "getAllBlockIds": {
          "type": "namespacemethod",
          "args": "",
          "returns": "array",
          "description": "Returns an aray of all used block IDs.",
          "example": "```\nvar blockId = 199;\nif (Block.getAllBlockIds().indexOf(blockId) > -1) { // we use the indexOf() function to see if the value is in the array\n\tprint('This ID is already taken!');\n}\n```"
        },
        "getDestroyTime": {
          "type": "namespacemethod",
          "args": "int, int",
          "arg_names": "id, data",
          "description": "Returns the destroy time of a block.",
          "example": "No information yet."
        },
        "getFriction": {
          "type": "namespacemethod",
          "args": "int",
          "arg_names": "id",
          "returns": "double",
          "description": "Returns the amount of friction a block has. The higher the friction, the slower the player walks over them.\n\nAll blocks return `0.6`, except ice which returns `0.98`.",
          "example": "No information yet."
        },
        "getRenderType": {
          "type": "namespacemethod",
          "args": "int",
          "returns": "int",
          "description": "Returns the render type being used by the block.",
          "example": "No information yet."
        },
        "setColor": {
          "type": "namespacemethod",
          "args": "int, array",
          "arg_names": "id, colorArray",
          "description": "Changes the color of the block.\n\nReplace `#` with `0x`, and wrap it inside an array.",
          "example": "For instance, if I want to make my custom block pink (#ff00ff):\n```\nBlock.setColor(204, [0xff00ff]);\n```"
        },
        "setDestroyTime": {
          "type": "namespacemethod",
          "args": "int, double",
          "arg_names": "id, time",
          "description": "Sets how long to destroy a block. A shorter time means a lesser time required.\nTime is not in seconds. See the MC wiki for examples, [specifically the 'Breaking time' by hand column](http://minecraft.gamepedia.com/Breaking#Blocks_by_hardness).",
          "example": "```\nBlock.setDestroyTime(204, 40);\n```"
        },
        "setExplosionResistance": {
          "type": "namespacemethod",
          "args": "int, double",
          "arg_names": "id, resistance",
          "description": "Sets the explosion resistance of a single block.\n`resistance` is the total number of TNT explosions it will take to destroy the block.",
          "example": "No information yet."
        },
        "setFriction": {
          "type": "namespacemethod",
          "args": "int, double",
          "arg_names": "id, friction",
          "description": "Sets the friction of a block. The higher the friction, the slower the player walks over them.\n\nAll blocks have `0.6`, except ice which has `0.98`.",
          "example": "No information yet."
        },
        "setLightLevel": {
          "type": "namespacemethod",
          "args": "int, int",
          "arg_names": "id, lightLevel",
          "description": "Sets how much light this block will give off.\n`lightLevel` must be from 0-15.",
          "example": "No information yet."
        },
        "setLightOpacity": {
          "type": "namespacemethod",
          "args": "int, int",
          "arg_names": "id, lightOpacity",
          "description": "Sets the light opacity of a block. You can use it for letting light through.\n- 0 lets all light through.\n- 10 (max) lets none through.\nYou may have to use `Block.setRenderLayer(YOUR_ID_HERE, 4);`, which sets a block's render layer to 4 (plants), in order for the light to pass through.",
          "example": "No information yet."
        },
        "setRedstoneConsumer": {
          "type": "namespacemethod",
          "args": "int, boolean",
          "arg_names": "id, boolean",
          "description": "Allows a block to accept redstone input.",
          "example": "No information yet."
        },
        "setRenderLayer": {
          "type": "namespacemethod",
          "args": "int, int",
          "arg_names": "id, renderLayer",
          "description": "Sets the layer this block will render at.",
          "example": "No information yet."
        },
        "setRenderType": {
          "type": "namespacemethod",
          "args": "int, int",
          "arg_names": "id, renderType",
          "description": "Sets the rendering type of this block.\nUse [BlockRenderLayer](#BlockRenderLayer).",
          "example": "```\nBlock.setRenderLayer(204, BlockRenderLayer.alpha);\n```"
        },
        "setShape": {
          "type": "namespacemethod",
          "args": "int, double, double, double, double, double, double, int",
          "arg_names": "id, minX, minY, minZ, maxX, maxY, maxZ, damage",
          "description": "Sets a block's boundaries.",
          "example": "```\nBlock.setShape(204, 0.25, 0, 0.25, 0.75, 0.5, 0.75, 0);\n```\nThis creates a block that is half the size of a regular block. Do note, with the full light opacity, blocks may not let light through.\n\n![picture of custom shape](images/setshape_example.png)"
        },
        "getTextureCoords": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "int, int, int"
        },
        "getRenderLayer": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "int"
        }
      }
    },
    "Server": {
      "namespace": true,
      "values": {
        "getAddress": {
          "type": "namespacemethod",
          "args": "",
          "returns": "string",
          "description": "Returns the address of the current server.",
          "example": "No information yet."
        },
        "getAllPlayerNames": {
          "type": "namespacemethod",
          "args": "",
          "returns": "string[]",
          "description": "Returns an array of all player names on the current server.",
          "example": "No information yet."
        },
        "getAllPlayers": {
          "type": "namespacemethod",
          "args": "",
          "returns": "int[]",
          "description": "Returns an array of all player entity IDs on the current server.",
          "example": "No information yet."
        },
        "getPort": {
          "type": "namespacemethod",
          "args": "",
          "returns": "int",
          "description": "Returns the port of the current server.",
          "example": "No information yet."
        },
        "joinServer": {
          "type": "namespacemethod",
          "args": "string, int",
          "arg_names": "address, port",
          "description": "Joins a server.",
          "example": "No information yet."
        },
        "sendChat": {
          "type": "namespacemethod",
          "args": "string",
          "arg_names": "message",
          "description": "Sends a message via chat.",
          "example": "No information yet."
        }
      }
    },
    "Hooks": {
      "namespace": false,
      "values": {
        "attackHook": {
          "type": "hook",
          "args": "entity, entity",
          "arg_names": "attacker, victim",
          "description": "Called when an entity hits (attacks) another entity.",
          "example": "No information yet.",
          "can_prevent": true
        },
        "chatHook": {
          "type": "hook",
          "args": "string",
          "description": "No information yet.",
          "example": "No information yet.",
          "can_prevent": true
        },
        "destroyBlock": {
          "type": "hook",
          "args": "int, int, int, int",
          "arg_names": "x, y, z, side",
          "description": "Called when a block has been destroyed.",
          "example": "No information yet.",
          "can_prevent": true
        },
        "projectileHitEntityHook": {
          "type": "hook",
          "args": "entity, entity",
          "arg_names": "projectile, targetEntity",
          "description": "Called when a projectile hits an entity.",
          "example": "No information yet."
        },
        "eatHook": {
          "type": "hook",
          "args": "int, int",
          "arg_names": "hearts, saturationRatio",
          "description": "Called when the player eats something.",
          "example": "No information yet."
        },
        "entityAddedHook": {
          "type": "hook",
          "args": "entity",
          "description": "Called when an entity has been added into the world.",
          "example": "No information yet."
        },
        "entityRemovedHook": {
          "type": "hook",
          "args": "entity",
          "description": "Called when an entity has been removed from the world.",
          "example": "No information yet."
        },
        "explodeHook": {
          "type": "hook",
          "args": "entity, int, int, int, int, boolean",
          "arg_names": "entity, x, y, z, power, onFire",
          "description": "Called when an explosion happens.",
          "example": "No information yet.",
          "can_prevent": true
        },
        "serverMessageReceiveHook": {
          "type": "hook",
          "args": "string",
          "description": "No information yet.",
          "example": "No information yet.",
          "can_prevent": true
        },
        "leaveGame": {
          "type": "hook",
          "args": "",
          "description": "Called when the game is exiting from a ",
          "example": "No information yet."
        },
        "deathHook": {
          "type": "hook",
          "args": "entity, entity",
          "arg_names": "attacker, victim",
          "description": "Called when an entity dies.",
          "example": "No information yet.",
          "can_prevent": true
        },
        "redstoneUpdateHook": {
          "type": "hook",
          "arg_names": "x, y, z, signalStrength, worldLoading, blockId, blockData",
          "args": "int, int, int, int, bool, int, int",
          "description": "Called when a block is updated by redstone.\n\n- `signalStrength` is the strength of the redstone signal, from 0 - 15.\n- `worldLoading` is `true` if the block update is caused by the world loading.",
          "example": "```\nfunction redstoneUpdateHook(x, y, z, signalStrength, worldLoading, blockId, blockData) {\n\tif (blockId == 35) { // 35 = wool\n\t\tif (!worldLoading && signalStrength > 0) { // make sure it's a 'power on' event\n\t\t\tblockData = blockData >= 15: 0 ? blockData + 1; // we want to reset the data value to 0 if it's already the highest, otherwise add 1;\n\t\t\tLevel.setTile(x, y, z, blockId, blockData);\n\t\t}\n\t}\n}\n```\nThis example increases the data value of a wool block when it's powered by redstone. If it's already black (the highest data value, 15), then it's resetted to white.\nIf you use a clock, you'll have disco wool."
        },
        "selectLevelHook": {
          "type": "hook",
          "args": "",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "newLevel": {
          "type": "hook",
          "args": "",
          "description": "Called when the game starts loading into a ",
          "example": "No information yet."
        },
        "startDestroyBlock": {
          "type": "hook",
          "args": "int, int, int, int",
          "arg_names": "x, y, z, side",
          "description": "No information yet.",
          "example": "No information yet.",
          "can_prevent": true
        },
        "projectileHitBlockHook": {
          "type": "hook",
          "args": "entity, int, int, int, int",
          "arg_names": "projectile, blockX, blockY, blockZ, side",
          "description": "Called when a projectile hits a block.",
          "example": "No information yet."
        },
        "modTick": {
          "type": "hook",
          "args": "",
          "description": "Called every tick (usually 20 times per second). This can be used to create timers.",
          "example": "No information yet."
        },
        "useItem": {
          "type": "hook",
          "args": "int, int, int, int, int, int, int, int",
          "arg_names": "x, y, z, itemid, blockid, side, itemDamage, blockDamage",
          "description": "Called when the player taps on a block.",
          "example": "No information yet.",
          "can_prevent": true
        },
        "procCmd": {
          "type": "hook",
          "arg_names": "command",
          "args": "string",
          "description": "Called whenever a command is entered",
          "example": "```\nfunction procCmd(command) {\n\tvar cmd = command.split(' ');\n\tif (cmd[0].toLowerCase() == 'coords') {\n\t\tModPE.showTipMessage(Player.getX() + '/' + Player.getY() + '/' + Player.getZ());\n\t}\n}\n```\nIt is recommended to split `command` into an array, so you can individually access each argument.\nIf arguments are required, then `command` will equal `\"tp 500 128 30\"`. Once split by   , you can access `\"tp\"` with `cmd[0]`, `\"500\"` with `cmd[1]`, etc..."
        },
        "continueDestroyBlock": {
          "type": "hook",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "int, int, int, int, int?",
          "arg_names": "x, y, z, side, progress",
          "can_prevent": true
        },
        "entityHurtHook": {
          "type": "hook",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "attacker, victim, halfhearts",
          "can_prevent": true
        },
        "playerAddExpHook": {
          "type": "hook",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "player, experienceAdded",
          "can_prevent": true
        },
        "playerExpLevelChangeHook": {
          "type": "hook",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "player, levelsAdded",
          "can_prevent": true
        },
        "screenChangeHook": {
          "type": "hook",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "screenName"
        }
      }
    },
    "ChatColor": {
      "namespace": true,
      "values": {
        "AQUA": {
          "type": "constant",
          "description": "Aqua (teal) colored text."
        },
        "BEGIN": {
          "type": "constant",
          "description": "Unknown."
        },
        "BLACK": {
          "type": "constant",
          "description": "Black colored text."
        },
        "BLUE": {
          "type": "constant",
          "description": "Blue colored text."
        },
        "BOLD": {
          "type": "constant",
          "description": "Bold text."
        },
        "DARK_AQUA": {
          "type": "constant",
          "description": "Dark aqua (teal) colored text."
        },
        "DARK_BLUE": {
          "type": "constant",
          "description": "Dark blue colored text."
        },
        "DARK_GRAY": {
          "type": "constant",
          "description": "Dark gray colored text."
        },
        "DARK_GREEN": {
          "type": "constant",
          "description": "Dark green colored text."
        },
        "DARK_PURPLE": {
          "type": "constant",
          "description": "Dark purple colored text."
        },
        "DARK_RED": {
          "type": "constant",
          "description": "Dark red colored text."
        },
        "GOLD": {
          "type": "constant",
          "description": "Golden colored text."
        },
        "GRAY": {
          "type": "constant",
          "description": "Gray colored text."
        },
        "GREEN": {
          "type": "constant",
          "description": "Green colored text."
        },
        "LIGHT_PURPLE": {
          "type": "constant",
          "description": "Light purple colored text."
        },
        "RED": {
          "type": "constant",
          "description": "Red colored text."
        },
        "RESET": {
          "type": "constant",
          "description": "Resets chat formatting back to normal."
        },
        "WHITE": {
          "type": "constant",
          "description": "White colored text."
        },
        "YELLOW": {
          "type": "constant",
          "description": "Yellow colored text."
        }
      }
    },
    "ItemCategory": {
      "namespace": true,
      "values": {
        "DECORATION": {
          "type": "constant",
          "description": "Decorations category."
        },
        "FOOD": {
          "type": "constant",
          "description": "Foodstuffs category."
        },
        "INTERNAL": {
          "type": "constant",
          "description": "No information yet."
        },
        "MATERIAL": {
          "type": "constant",
          "description": "Materials (general blocks?) actegory"
        },
        "TOOL": {
          "type": "constant",
          "description": "Tools category."
        }
      }
    },
    "ParticleType": {
      "namespace": true,
      "values": {
        "angryVillager": {
          "type": "constant",
          "description": "Angry villager icons."
        },
        "bubble": {
          "type": "constant",
          "description": "Bubbles!"
        },
        "cloud": {
          "type": "constant",
          "description": "Unknown."
        },
        "crit": {
          "type": "constant",
          "description": "Particles created by a critical hit."
        },
        "dripLava": {
          "type": "constant",
          "description": "Dripping lava."
        },
        "dripWater": {
          "type": "constant",
          "description": "Dripping water."
        },
        "enchantmenttable": {
          "type": "constant",
          "description": "Enchantment table particles."
        },
        "fallingDust": {
          "type": "constant",
          "description": "Falling dust, probably created by unstable sand."
        },
        "flame": {
          "type": "constant",
          "description": "Flames."
        },
        "happyVillager": {
          "type": "constant",
          "description": "Happy villager icons."
        },
        "heart": {
          "type": "constant",
          "description": "Hearts, usually created by animals."
        },
        "hugeexplosion": {
          "type": "constant",
          "description": "A huge explosion."
        },
        "hugeexplosionSeed": {
          "type": "constant",
          "description": "Unknown."
        },
        "ink": {
          "type": "constant",
          "description": "No information yet."
        },
        "itemBreak": {
          "type": "constant",
          "description": "Particles of an item breaking."
        },
        "largeexplode": {
          "type": "constant",
          "description": "A large explosion."
        },
        "lava": {
          "type": "constant",
          "description": "Particles created by lava."
        },
        "mobFlame": {
          "type": "constant",
          "description": "Unknown."
        },
        "note": {
          "type": "constant",
          "description": "Particles emitted by a note block."
        },
        "portal": {
          "type": "constant",
          "description": "Particles emitted by portals."
        },
        "rainSplash": {
          "type": "constant",
          "description": "Particles emitted by rain when it hits the ground."
        },
        "redstone": {
          "type": "constant",
          "description": "Particles emitted by powered redstone."
        },
        "slime": {
          "type": "constant",
          "description": "Slime particles?"
        },
        "smoke": {
          "type": "constant",
          "description": "Smoke."
        },
        "smoke2": {
          "type": "constant",
          "description": "Unknown. Probably an alternate smoke particle."
        },
        "snowballpoof": {
          "type": "constant",
          "description": "Unknown. Possibly particles created by a snowball."
        },
        "spell": {
          "type": "constant",
          "description": "Unknown. Possibly enchanting table spells."
        },
        "spell2": {
          "type": "constant",
          "description": "Unknown. Possibly enchanting table spells."
        },
        "spell3": {
          "type": "constant",
          "description": "Unknown. Possibly enchanting table spells."
        },
        "splash": {
          "type": "constant",
          "description": "Splash particles created from splashing in water."
        },
        "suspendedTown": {
          "type": "constant",
          "description": "Unknown."
        },
        "terrain": {
          "type": "constant",
          "description": "Unknown. Possibly particles emitted from breaking blocks."
        },
        "waterWake": {
          "type": "constant",
          "description": "Unknown."
        },
        "carrotboost": {
          "type": "constant",
          "description": "No information yet."
        },
        "witchspell": {
          "type": "constant",
          "description": "Particles emitted from witch magic."
        }
      }
    },
    "EntityType": {
      "namespace": true,
      "values": {
        "ARROW": {
          "type": "constant",
          "description": "No information yet."
        },
        "BAT": {
          "type": "constant",
          "description": "A flying bat."
        },
        "BLAZE": {
          "type": "constant",
          "description": "A blaze."
        },
        "BOAT": {
          "type": "constant",
          "description": "A placed boat."
        },
        "CAVE_SPIDER": {
          "type": "constant",
          "description": "A poisonous cave spider."
        },
        "CHICKEN": {
          "type": "constant",
          "description": "A harmless chicken that lays eggs."
        },
        "COW": {
          "type": "constant",
          "description": "A cow."
        },
        "CREEPER": {
          "type": "constant",
          "description": "A creeper!"
        },
        "EGG": {
          "type": "constant",
          "description": "A thrown egg."
        },
        "ENDERMAN": {
          "type": "constant",
          "description": "An enderman. Spooky."
        },
        "EXPERIENCE_ORB": {
          "type": "constant",
          "description": "An experience orb on the ground."
        },
        "EXPERIENCE_POTION": {
          "type": "constant",
          "description": "A thrown experience potion."
        },
        "FALLING_BLOCK": {
          "type": "constant",
          "description": "A falling block. (Sand, gravel...)"
        },
        "FIREBALL": {
          "type": "constant",
          "description": "A flying fireball."
        },
        "FISHING_HOOK": {
          "type": "constant",
          "description": "A fishing hook produced by a fishing rod."
        },
        "GHAST": {
          "type": "constant",
          "description": "A ghast that lives in the nether."
        },
        "IRON_GOLEM": {
          "type": "constant",
          "description": "An iron golem."
        },
        "ITEM": {
          "type": "constant",
          "description": "A thrown item."
        },
        "LAVA_SLIME": {
          "type": "constant",
          "description": "A magma cube."
        },
        "LIGHTNING_BOLT": {
          "type": "constant",
          "description": "A lightning bolt."
        },
        "MINECART": {
          "type": "constant",
          "description": "A placed minecart."
        },
        "MUSHROOM_COW": {
          "type": "constant",
          "description": "A mooshroom cow."
        },
        "OCELOT": {
          "type": "constant",
          "description": "An ocelot."
        },
        "PAINTING": {
          "type": "constant",
          "description": "A placed painting (yes, these are entities.)"
        },
        "PIG": {
          "type": "constant",
          "description": "A pig."
        },
        "PIG_ZOMBIE": {
          "type": "constant",
          "description": "A zombie pigman."
        },
        "PLAYER": {
          "type": "constant",
          "description": "No information yet."
        },
        "PRIMED_TNT": {
          "type": "constant",
          "description": "A lit TNT entity."
        },
        "RABBIT": {
          "type": "constant",
          "description": "A rabbit."
        },
        "SHEEP": {
          "type": "constant",
          "description": "A sheep."
        },
        "SILVERFISH": {
          "type": "constant",
          "description": "A single silverfish."
        },
        "SKELETON": {
          "type": "constant",
          "description": "An arrow-shooting skeleton."
        },
        "SLIME": {
          "type": "constant",
          "description": "A slime."
        },
        "SMALL_FIREBALL": {
          "type": "constant",
          "description": "No information yet."
        },
        "SNOWBALL": {
          "type": "constant",
          "description": "A thrown snowball."
        },
        "SNOW_GOLEM": {
          "type": "constant",
          "description": "A snowman!"
        },
        "SPIDER": {
          "type": "constant",
          "description": "A spider."
        },
        "SQUID": {
          "type": "constant",
          "description": "A squid."
        },
        "THROWN_POTION": {
          "type": "constant",
          "description": "A thrown potion."
        },
        "VILLAGER": {
          "type": "constant",
          "description": "A(n) (annoying) villager."
        },
        "WOLF": {
          "type": "constant",
          "description": "A wolf."
        },
        "ZOMBIE": {
          "type": "constant",
          "description": "A harmful zombie."
        },
        "ZOMBIE_VILLAGER": {
          "type": "constant",
          "description": "Zombie-villager hybrid."
        }
      }
    },
    "EntityRenderType": {
      "namespace": true,
      "values": {
        "arrow": {
          "type": "constant",
          "description": "Arrow render type."
        },
        "bat": {
          "type": "constant",
          "description": "Bat render type."
        },
        "blaze": {
          "type": "constant",
          "description": "Blaze render type."
        },
        "boat": {
          "type": "constant",
          "description": "Boat render type."
        },
        "chicken": {
          "type": "constant",
          "description": "Chicken render type."
        },
        "cow": {
          "type": "constant",
          "description": "Cow render type. *moo*"
        },
        "creeper": {
          "type": "constant",
          "description": "Creeper render type. *ssss*"
        },
        "egg": {
          "type": "constant",
          "description": "Egg render type."
        },
        "enderman": {
          "type": "constant",
          "description": "Enderman render type."
        },
        "expPotion": {
          "type": "constant",
          "description": "Experience potion render type."
        },
        "experienceOrb": {
          "type": "constant",
          "description": "Experience orb render type."
        },
        "fallingTile": {
          "type": "constant",
          "description": "Falling tile render type."
        },
        "fireball": {
          "type": "constant",
          "description": "Fireball render type."
        },
        "fishHook": {
          "type": "constant",
          "description": "Fishing rod hook render type."
        },
        "ghast": {
          "type": "constant",
          "description": "Ghast render type."
        },
        "human": {
          "type": "constant",
          "description": "No information yet."
        },
        "ironGolem": {
          "type": "constant",
          "description": "Iron golem render type."
        },
        "item": {
          "type": "constant",
          "description": "Thrown item render type."
        },
        "lavaSlime": {
          "type": "constant",
          "description": "Magma cube render type."
        },
        "lightningBolt": {
          "type": "constant",
          "description": "Lightning bolt render type."
        },
        "minecart": {
          "type": "constant",
          "description": "Minecart render type."
        },
        "mushroomCow": {
          "type": "constant",
          "description": "Mooshroom render type."
        },
        "ocelot": {
          "type": "constant",
          "description": "Ocelot render type."
        },
        "pig": {
          "type": "constant",
          "description": "Pig render type."
        },
        "player": {
          "type": "constant",
          "description": "No information yet."
        },
        "player2": {
          "type": "constant",
          "description": "No information yet.",
          "deprecated": true
        },
        "sheep": {
          "type": "constant",
          "description": "Entity render type for a sheep."
        },
        "silverfish": {
          "type": "constant",
          "description": "Entity render type for a silverfish."
        },
        "skeleton": {
          "type": "constant",
          "description": "Entity render type for a skeleton."
        },
        "slime": {
          "type": "constant",
          "description": "Entity render type for a slime."
        },
        "smallFireball": {
          "type": "constant",
          "description": "No information yet."
        },
        "snowGolem": {
          "type": "constant",
          "description": "Snow golem (snowman) render type."
        },
        "snowball": {
          "type": "constant",
          "description": "Snowball render type."
        },
        "spider": {
          "type": "constant",
          "description": "Spider render type."
        },
        "squid": {
          "type": "constant",
          "description": "Squid render type."
        },
        "thrownPotion": {
          "type": "constant",
          "description": "Thrown potion render type."
        },
        "tnt": {
          "type": "constant",
          "description": "Ignited TNT render type."
        },
        "unknown1": {
          "type": "constant",
          "description": "Like the name says, unknown.",
          "deprecated": true
        },
        "villager": {
          "type": "constant",
          "description": "Villager render type."
        },
        "villagerZombie": {
          "type": "constant",
          "description": "Villager/zombie hybrid render type."
        },
        "wolf": {
          "type": "constant",
          "description": "Wolf render type."
        },
        "zombie": {
          "type": "constant",
          "description": "Zombie render type."
        },
        "zombiePigman": {
          "type": "constant",
          "description": "Zombie Pigman render type."
        },
        "camera": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "map": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "painting": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "rabbit": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "unknownItem": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "witch": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        }
      }
    },
    "ArmorType": {
      "namespace": true,
      "values": {
        "boots": {
          "type": "constant",
          "description": "Boots armor. Covers the feet."
        },
        "chestplate": {
          "type": "constant",
          "description": "Chestplate armor. Covers the chestplate."
        },
        "helmet": {
          "type": "constant",
          "description": "Helmet armor. Covers the head."
        },
        "leggings": {
          "type": "constant",
          "description": "Leggings armor. Covers the legs."
        }
      }
    },
    "MobEffect": {
      "namespace": true,
      "values": {
        "absorption": {
          "type": "constant",
          "description": "Adds hearts that disappear once the affect ends."
        },
        "blindness": {
          "type": "constant",
          "description": "Blindness. Creates black fog around the entity so they cannot see."
        },
        "confusion": {
          "type": "constant",
          "description": "Nausea. Wobbles and warps the screen."
        },
        "damageBoost": {
          "type": "constant",
          "description": "Damage boost (strength). Increases the amount of damage the entity deals."
        },
        "damageResistance": {
          "type": "constant",
          "description": "Resistance. Makes the entity more resistant to damage."
        },
        "digSlowdown": {
          "type": "constant",
          "description": "Dig slowdown (mining fatigue). Makes the entity mine slower."
        },
        "digSpeed": {
          "type": "constant",
          "description": "Dig speed (haste). Makes the entity mine faster."
        },
        "effectIds": {
          "type": "constant",
          "description": "No information yet."
        },
        "fireResistance": {
          "type": "constant",
          "description": "No information yet."
        },
        "harm": {
          "type": "constant",
          "description": "Instant damage. Instantly damages the entity."
        },
        "heal": {
          "type": "constant",
          "description": "Instant health. Instantly increases health. (Not amount of hearts.)"
        },
        "healthBoost": {
          "type": "constant",
          "description": "Health boost. Increases the amount of hearts the entity has."
        },
        "hunger": {
          "type": "constant",
          "description": "Hungers. Makes the entity hungry."
        },
        "invisibility": {
          "type": "constant",
          "description": "Invisibility. Makes the entity invisible."
        },
        "jump": {
          "type": "constant",
          "description": "Jump boost. Adds jump height."
        },
        "movementSlowdown": {
          "type": "constant",
          "description": "Slowness. Makes the entity move slower."
        },
        "movementSpeed": {
          "type": "constant",
          "description": "Speed. Makes the entity move faster."
        },
        "nightVision": {
          "type": "constant",
          "description": "Night vision. Allows the entity to see in the dark."
        },
        "poison": {
          "type": "constant",
          "description": "Poison. Makes the entity lose continuously lose hearts. They are left at one heart if it is not cured."
        },
        "regeneration": {
          "type": "constant",
          "description": "Regeneration. Makes the entity regenerate their hearts continuously."
        },
        "saturation": {
          "type": "constant",
          "description": "Decreases how hungry the entity is per tick."
        },
        "waterBreathing": {
          "type": "constant",
          "description": "Water breathing. Allows the entity to breathe underwater."
        },
        "weakness": {
          "type": "constant",
          "description": "Weakness. Decreases the amount of attack the entity deals."
        },
        "wither": {
          "type": "constant",
          "description": "Similar to poison. Turns hearts black and can kill the entity."
        }
      }
    },
    "DimensionId": {
      "namespace": true,
      "values": {
        "NETHER": {
          "type": "constant",
          "description": "The Dimension ID of the nether."
        },
        "NORMAL": {
          "type": "constant",
          "description": "The Dimension ID of the overworld."
        }
      }
    },
    "BlockFace": {
      "namespace": true,
      "values": {
        "DOWN": {
          "type": "constant",
          "description": "The block side facing down."
        },
        "EAST": {
          "type": "constant",
          "description": "The block side facing east."
        },
        "NORTH": {
          "type": "constant",
          "description": "The block side facing north."
        },
        "SOUTH": {
          "type": "constant",
          "description": "The block side facing south."
        },
        "UP": {
          "type": "constant",
          "description": "The block side facing up."
        },
        "WEST": {
          "type": "constant",
          "description": "The block side facing west."
        }
      }
    },
    "Enchantment": {
      "namespace": true,
      "values": {
        "PROTECTION": {
          "type": "constant",
          "description": "Protection."
        },
        "FIRE_PROTECTION": {
          "type": "constant",
          "description": "Fire protection. Grants additional protection against fire."
        },
        "FEATHER_FALLING": {
          "type": "constant",
          "description": "Grants additional protection against fall damage."
        },
        "BLAST_PROTECTION": {
          "type": "constant",
          "description": "Grants additional protection against explosions (like TNT)."
        },
        "PROJECTILE_PROTECTION": {
          "type": "constant",
          "description": "Grants additional protection against projectiles."
        },
        "THORNS": {
          "type": "constant",
          "description": "Makes enemies take damage when they hurt you."
        },
        "RESPIRATION": {
          "type": "constant",
          "description": "Allows you to breathe underwater for a longer period of time."
        },
        "AQUA_AFFINITY": {
          "type": "constant",
          "description": "Makes you break blocks underwater faster."
        },
        "DEPTH_STRIDER": {
          "type": "constant",
          "description": "Makes you walk faster underwater."
        },
        "SHARPNESS": {
          "type": "constant",
          "description": "Makes something sharper (does more damage.)"
        },
        "SMITE": {
          "type": "constant",
          "description": "Increases damage dealt to undead mobs. Applies to-\n- Skeletons\n- Zombies\n- Zombie Pigmen\n- Withers and Wither Skeletons when they exist."
        },
        "BANE_OF_ARTHROPODS": {
          "type": "constant",
          "description": "Makes something more effective against spiders."
        },
        "KNOCKBACK": {
          "type": "constant",
          "description": "Makes something knock things back further when hit."
        },
        "FIRE_ASPECT": {
          "type": "constant",
          "description": "Makes something light on fire when hit."
        },
        "LOOTING": {
          "type": "constant",
          "description": "Makes something drop more loot when killed with."
        },
        "EFFICIENCY": {
          "type": "constant",
          "description": "Makes something mine faster."
        },
        "SILK_TOUCH": {
          "type": "constant",
          "description": "Makes something return it's pure form when mined. (e.g makes mining stone drop actual stone, not cobblestone.)"
        },
        "UNBREAKING": {
          "type": "constant",
          "description": "Makes something more durable."
        },
        "FORTUNE": {
          "type": "constant",
          "description": "Makes ores drop more stuff when mined with."
        },
        "POWER": {
          "type": "constant",
          "description": "Makes bows do more damage."
        },
        "PUNCH": {
          "type": "constant",
          "description": "Makes bows knock mobs/entities further."
        },
        "FLAME": {
          "type": "constant",
          "description": "Makes bows light mobs/entities on fire."
        },
        "INFINITY": {
          "type": "constant",
          "description": "Makes bows consume no arrows."
        },
        "LUCK_OF_THE_SEA": {
          "type": "constant",
          "description": "Decreases odds of catching useless items while fishing."
        },
        "LURE": {
          "type": "constant",
          "description": "Increases odds of fishes to bite your hook while fishing."
        }
      }
    },
    "Sounds": {
      "namespace": false,
      "values": {
        "step_cloth": {
          "display": "step.cloth",
          "type": "string",
          "description": "Stepping on wool.",
          "deprecated": false
        },
        "step_grass": {
          "display": "step.grass",
          "type": "string",
          "description": "Stepping on grass.",
          "deprecated": false
        },
        "step_gravel": {
          "display": "step.gravel",
          "type": "string",
          "description": "Stepping on gravel.",
          "deprecated": false
        },
        "step_sand": {
          "display": "step.sand",
          "type": "string",
          "description": "Stepping on sand.",
          "deprecated": false
        },
        "step_stone": {
          "display": "step.stone",
          "type": "string",
          "description": "Stepping on stone.",
          "deprecated": false
        },
        "step_wood": {
          "display": "step.wood",
          "type": "string",
          "description": "Stepping on wood.",
          "deprecated": false
        },
        "random_splash": {
          "display": "random.splash",
          "type": "string",
          "description": "Splashing water sound.",
          "deprecated": false
        },
        "random_explode": {
          "display": "random.explode",
          "type": "string",
          "description": "Explosion sound.",
          "deprecated": false
        },
        "random_break": {
          "display": "random.break",
          "type": "string",
          "description": "Sound when an item breaks.",
          "deprecated": false
        },
        "random_burp": {
          "display": "random.burp",
          "type": "string",
          "description": "Burp sound.",
          "deprecated": false
        },
        "fire_fire": {
          "display": "fire.fire",
          "type": "string",
          "description": "Fire crackle.",
          "deprecated": false
        },
        "fire_ignite": {
          "display": "fire.ignite",
          "type": "string",
          "description": "Fire ignition sound.",
          "deprecated": false
        },
        "random_chestclosed": {
          "display": "random.chestclosed",
          "type": "string",
          "description": "Chest closing.",
          "deprecated": false
        },
        "random_chestopen": {
          "display": "random.chestopen",
          "type": "string",
          "description": "Chest opening",
          "deprecated": false
        },
        "random_hurt": {
          "display": "random.hurt",
          "type": "string",
          "description": "Player hurt sound.",
          "deprecated": false
        },
        "random_glass": {
          "display": "random.glass",
          "type": "string",
          "description": "Glass breaking sound.",
          "deprecated": false
        },
        "mob_sheep": {
          "display": "mob.sheep",
          "type": "string",
          "description": "Sheep baa.",
          "deprecated": false
        },
        "mob_pig": {
          "display": "mob.pig",
          "type": "string",
          "description": "Pig oink.",
          "deprecated": false
        },
        "mob_pigdeath": {
          "display": "mob.pigdeath",
          "type": "string",
          "description": "Pig dying sound.",
          "deprecated": false
        },
        "mob_cow": {
          "display": "mob.cow",
          "type": "string",
          "description": "Cow moo.",
          "deprecated": false
        },
        "mob_cowhurt": {
          "display": "mob.cowhurt",
          "type": "string",
          "description": "Cow hurting.",
          "deprecated": false
        },
        "mob_chicken": {
          "display": "mob.chicken",
          "type": "string",
          "description": "Chicken cluck.",
          "deprecated": false
        },
        "mob_chickenhurt": {
          "display": "mob.chickenhurt",
          "type": "string",
          "description": "Chicken hurting.",
          "deprecated": false
        },
        "mob_zombie": {
          "display": "mob.zombie",
          "type": "string",
          "description": "Zombie growl.",
          "deprecated": false
        },
        "mob_zombiedeath": {
          "display": "mob.zombiedeath",
          "type": "string",
          "description": "Zombie dying sound.",
          "deprecated": false
        },
        "mob_zombiehurt": {
          "display": "mob.zombiehurt",
          "type": "string",
          "description": "Zombie hurting.",
          "deprecated": false
        },
        "mob_skeleton": {
          "display": "mob.skeleton",
          "type": "string",
          "description": "Skeleton bones sound.",
          "deprecated": false
        },
        "mob_skeletonhurt": {
          "display": "mob.skeletonhurt",
          "type": "string",
          "description": "Skeleton hurting.",
          "deprecated": false
        },
        "mob_spider": {
          "display": "mob.spider",
          "type": "string",
          "description": "Spider hiss.",
          "deprecated": false
        },
        "mob_spiderdeath": {
          "display": "mob.spiderdeath",
          "type": "string",
          "description": "Spider dying sound.",
          "deprecated": false
        },
        "mob_zombiepig_zpig": {
          "display": "mob.zombiepig.zpig",
          "type": "string",
          "description": "Zombie pigman sound.",
          "deprecated": false
        },
        "mob_zombiepig_zpigangry": {
          "display": "mob.zombiepig.zpigangry",
          "type": "string",
          "description": "Angry zombie pigman sound.",
          "deprecated": false
        },
        "mob_zombiepig_zpigdeath": {
          "display": "mob.zombiepig.zpigdeath",
          "type": "string",
          "description": "Zombie pigman dying sound.",
          "deprecated": false
        },
        "mob_zombiepig_zpighurt": {
          "display": "mob.zombiepig.zpighurt",
          "type": "string",
          "description": "Zombie pigman hurting.",
          "deprecated": false
        },
        "damage_fallbig": {
          "display": "damage.fallbig",
          "type": "string",
          "description": "Large fall sound.",
          "deprecated": false
        },
        "damage_fallsmall": {
          "display": "damage.fallsmall",
          "type": "string",
          "description": "Small fall sound.",
          "deprecated": false
        },
        "random_bow": {
          "display": "random.bow",
          "type": "string",
          "description": "Bow noise.",
          "deprecated": false
        },
        "random_bowhit": {
          "display": "random.bowhit",
          "type": "string",
          "description": "Bow hitting entity sound.",
          "deprecated": false
        },
        "mob_creeper": {
          "display": "mob.creeper",
          "type": "string",
          "description": "Creeper hiss.",
          "deprecated": false
        },
        "mob_creeperdeath": {
          "display": "mob.creeperdeath",
          "type": "string",
          "description": "Creeper dying sound.",
          "deprecated": false
        },
        "random_eat": {
          "display": "random.eat",
          "type": "string",
          "description": "Eating sound.",
          "deprecated": false
        },
        "random_fuse": {
          "display": "random.fuse",
          "type": "string",
          "description": "TNT fuse.",
          "deprecated": false
        }
      }
    },
    "NamespaceMethod": {
      "values": {
        "addItemInventory": {
          "deprecated": "Player.addItemInventory",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "int, int, int"
        },
        "bl_setMobSkin": {
          "deprecated": "Entity.setMobSkin",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "Object, string"
        },
        "bl_spawnMob": {
          "deprecated": "Entity.spawnMob",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "double, double, double, int, string"
        },
        "clientMessage": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "string"
        },
        "explode": {
          "deprecated": "Level.explode",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "double, double, double, double, par5boolean"
        },
        "getCarriedItem": {
          "deprecated": "Player.getCarriedItem",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getLevel": {
          "deprecated": "Player.getLevel",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getPitch": {
          "deprecated": "Player.getPitch",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "Object"
        },
        "getPlayerEnt": {
          "deprecated": "Player.getEntity",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getPlayerX": {
          "deprecated": "Player.getX",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getPlayerY": {
          "deprecated": "Player.getY",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getPlayerZ": {
          "deprecated": "Player.getZ",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "getTile": {
          "deprecated": "Level.getTile",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "int, int, int"
        },
        "getYaw": {
          "deprecated": "Entity.getYaw",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "Object"
        },
        "preventDefault": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "print": {
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "string"
        },
        "rideAnimal": {
          "deprecated": "Entity.rideAnimal",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "Object, Object"
        },
        "setNightMode": {
          "deprecated": "Level.setNightMode",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "par1boolean"
        },
        "setPosition": {
          "deprecated": "Entity.setPosition",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "Object, double, double, double"
        },
        "setPositionRelative": {
          "deprecated": "Entity.setPositionRelative",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "Object, double, double, double"
        },
        "setRot": {
          "deprecated": "Entity.setRot",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "Object, double, double"
        },
        "setTile": {
          "deprecated": "Level.setTile",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "int, int, int, int, int"
        },
        "setVelX": {
          "deprecated": "Entity.setVelX",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "Object, double"
        },
        "setVelY": {
          "deprecated": "Entity.setVelY",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "Object, double"
        },
        "setVelZ": {
          "deprecated": "Entity.setVelZ",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "Object, double"
        },
        "spawnChicken": {
          "deprecated": "Level.spawnChicken",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "double, double, double, string"
        },
        "spawnCow": {
          "deprecated": "Level.spawnCow",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "double, double, double, string"
        },
        "spawnPigZombie": {
          "deprecated": "Level.spawnPigZombie",
          "type": "namespacemethod",
          "description": "No information yet.",
          "example": "No information yet.",
          "args": "double, double, double, int, string"
        }
      },
      "namespace": false
    },
    "UseAnimation": {
      "values": {
        "bow": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "normal": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        }
      },
      "namespace": true
    },
    "EnchantType": {
      "values": {
        "all": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "axe": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "book": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "bow": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "fishingRod": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "flintAndSteel": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "hoe": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "pickaxe": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "shears": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "shovel": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "weapon": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        }
      },
      "namespace": true
    },
    "BlockRenderLayer": {
      "values": {
        "alpha": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "alpha_seasons": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "alpha_single_side": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "blend": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "doubleside": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "far": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "opaque": {
          "type": "constant",
          "description": "Totally solid block, like stone.",
          "example": "No information yet."
        },
        "opaque_seasons": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "seasons_far": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "seasons_far_alpha": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        },
        "water": {
          "type": "constant",
          "description": "No information yet.",
          "example": "No information yet."
        }
      },
      "namespace": true
    }
  }
}
